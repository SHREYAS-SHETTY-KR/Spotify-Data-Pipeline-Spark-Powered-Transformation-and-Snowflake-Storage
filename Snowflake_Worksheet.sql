CREATE DATABASE SPOTIFY_DB;


CREATE OR REPLACE STORAGE INTEGRATION s3_init
  TYPE = EXTERNAL_STAGE
  STORAGE_PROVIDER = 's3'
  STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::837934442683:role/snowflake_s3_conn'
  STORAGE_ALLOWED_LOCATIONS = ('s3://spotify-project-spark')
  ENABLED = TRUE
  COMMENT = 'Creating connection to S3';

desc INTEGRATION s3_init

CREATE OR REPLACE FILE FORMAT CSV_FILEFORMAT
   TYPE = CSV
   FIELD_DELIMITER = ','
   SKIP_HEADER = 1
   NULL_IF = ('NULL', 'null')
   EMPTY_FIELD_AS_NULL = TRUE;

CREATE OR REPLACE STAGE SPOTIFY_STAGE
   URL = 's3://spotify-project-spark/transformed_data/'
   STORAGE_INTEGRATION = s3_init
   FILE_FORMAT = CSV_FILEFORMAT

LIST @SPOTIFY_STAGE

CREATE OR REPLACE TABLE ALBUM (
   ALBUM_ID STRING,
   NAME STRING,
   RELEASE_DATE STRING,
   TOTAL_TRACKS STRING,
   URL STRING
);

CREATE OR REPLACE TABLE ARTIST (
   ARTIST_ID STRING,
   NAME STRING,
   URL STRING
);

CREATE OR REPLACE TABLE SONG (
   SONG_ID STRING,
   SONG_NAME STRING,
   DURATION_MS INT,
   URL STRING,
   POPULARITY INT,
   SONG_ADDED DATE,
   ALBUM_ID STRING,
   ARTIST_ID STRING  
);




--CREATE SNOWPIPE
CREATE OR REPLACE SCHEMA PIPE

CREATE OR REPLACE PIPE SPOTIFY_DB.PUBLIC.SONG_PIPE
AUTO_INGEST = TRUE
AS
COPY INTO SPOTIFY_DB.PUBLIC.SONG
FROM @SPOTIFY_DB.PUBLIC.SPOTIFY_STAGE/songs;

CREATE OR REPLACE PIPE SPOTIFY_DB.PUBLIC.ARTIST_PIPE
AUTO_INGEST = TRUE
AS
COPY INTO SPOTIFY_DB.PUBLIC.ARTIST
FROM @SPOTIFY_DB.PUBLIC.SPOTIFY_STAGE/artist;

CREATE OR REPLACE PIPE SPOTIFY_DB.PUBLIC.ALBUM_PIPE
AUTO_INGEST = TRUE
AS
COPY INTO SPOTIFY_DB.PUBLIC.ALBUM
FROM @SPOTIFY_DB.PUBLIC.SPOTIFY_STAGE/album;


DESC PIPE ALBUM_PIPE
DESC PIPE ARTIST_PIPE
DESC PIPE SONG_PIPE

SELECT SYSTEM$PIPE_STATUS('ARTIST_PIPE')

SELECT * FROM SONG
SELECT * FROM ARTIST
SELECT * FROM ALBUM








